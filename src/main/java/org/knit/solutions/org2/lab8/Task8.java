/*
2.8 –ó–∞–¥–∞—á–∞ ¬´–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫: —Å–≤–µ—Ç–æ—Ñ–æ—Ä –∏ –º–∞—à–∏–Ω—ã¬ª üö¶üöó

üìå –û–ø–∏—Å–∞–Ω–∏–µ:
–ù–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ–º:

–ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç ‚Äì –º–∞—à–∏–Ω—ã —Å—Ç–æ—è—Ç (wait()).
–ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç ‚Äì –º–∞—à–∏–Ω—ã –µ–¥—É—Ç (notifyAll()).
–°–≤–µ—Ç–æ—Ñ–æ—Ä –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.
üîπ –ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?
‚úî –ü–æ—Ç–æ–∫ "–°–≤–µ—Ç–æ—Ñ–æ—Ä" –∏–∑–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç notifyAll().
‚úî –ü–æ—Ç–æ–∫–∏ "–ú–∞—à–∏–Ω–∞" –∂–¥—É—Ç wait(), –µ—Å–ª–∏ –∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç.
 */

package org.knit.solutions.org2.lab8;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Task8 {
    public static void main(String[] args) {
        TrafficLight trafficLight = new TrafficLight(); // –°–æ–∑–¥–∞–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä

        // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –º–∞—à–∏–Ω
        ExecutorService carExecutor = Executors.newFixedThreadPool(5);

        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –º–∞—à–∏–Ω
        for (int i = 1; i <= 5; i++) {
            carExecutor.execute(new Car(trafficLight, "–ú–∞—à–∏–Ω–∞ " + i));
        }

        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
        Thread trafficLightThread = new Thread(() -> {
            try {
                trafficLight.switchLight();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("–°–≤–µ—Ç–æ—Ñ–æ—Ä –ø—Ä–µ—Ä–≤–∞–Ω.");
            }
        });
        trafficLightThread.start();

        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        try {
            trafficLightThread.join();
        } catch (InterruptedException e) {
            System.out.println("–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω.");
        }

        carExecutor.shutdown(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
    }
}
