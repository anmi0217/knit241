package org.knit.solutions.TaskSem2;


import org.knit.TaskDescription;
import org.knit.solutions.ClassesSem2.lab2.task3.RailwayCrossing;
import org.knit.solutions.ClassesSem2.lab4.task1.Solution;

/**
 * –ó–∞–¥–∞—á–∞ 2.6: –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥ üöÜüöó
 * <p>
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * - –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–≤–∏–∂—É—Ç—Å—è, –Ω–æ –µ—Å–ª–∏ –ø–æ–µ–∑–¥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è, –æ–Ω–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∏ –∂–¥—É—Ç.
 * - –ü–æ—Å–ª–µ –ø—Ä–æ–µ–∑–¥–∞ –ø–æ–µ–∑–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ.
 * <p>
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –ü–æ—Ç–æ–∫ "–ü–æ–µ–∑–¥" –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (wait()).
 * - –ü–æ—Ç–æ–∫ "–ü–æ–µ–∑–¥" —Å–æ–æ–±—â–∞–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è (notifyAll()).
 * - –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∂–¥—É—Ç, –µ—Å–ª–∏ –ø–æ–µ–∑–¥ –µ–¥–µ—Ç, –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ notifyAll().
 */

@TaskDescription(taskNumber = 6,
        taskDescription = "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥",
        href = "org/knit/solutions/taskExampleClasses/README.md")

public class Task2_6 implements Solution {
    public void execute() {
        RailwayCrossing crossing = new RailwayCrossing();

        // –ü–æ—Ç–æ–∫ –ø–æ–µ–∑–¥–∞ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
        Thread train = new Thread(() -> {
            while (true) {
                try {
                    Thread.sleep(10000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
                crossing.arriveTrain();
            }
        });

        // –ü–æ—Ç–æ–∫–∏ –º–∞—à–∏–Ω (–µ–¥—É—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)
        for (int i = 1; i <= 5; i++) {
            String carName = "–ú–∞—à–∏–Ω–∞ " + i;
            new Thread(() -> {
                while (true) {
                    crossing.passCar(carName);
                    try {
                        Thread.sleep(5000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—à–∏–Ω
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }).start();
        }

        train.start();
    }
}
