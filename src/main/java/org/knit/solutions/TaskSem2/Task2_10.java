package org.knit.solutions.TaskSem2;

import org.knit.solutions.ClassesSem2.lab3.Runner;

import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.knit.TaskDescription;
import org.knit.solutions.ClassesSem2.lab4.task1.Solution;

/**
 * –ó–∞–¥–∞—á–∞ 10: –ì–æ–Ω–∫–∞ –±–µ–≥—É–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CyclicBarrier üèÉ‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÄÔ∏è
 * <p>
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * - –ì—Ä—É–ø–ø–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–±–µ–≥–µ. –í—Å–µ –¥–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø–µ—Ä–µ–¥ –≥–æ–Ω–∫–æ–π.
 * - –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –∑–∞–±–µ–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
 * <p>
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CyclicBarrier –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–±–µ–≥–∞.
 * - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Runner, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –ø–æ—Ç–æ–∫–µ.
 * - –ö–∞–∂–¥—ã–π –±–µ–≥—É–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –±–µ–∂–∏—Ç —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è (—Å–∏–º—É–ª—è—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Thread.sleep).
 * - –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –±–µ–≥—É–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–æ–±—â–∞–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏.
 * <p>
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):
 * - –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É CyclicBarrier, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö –±–µ–≥—É–Ω–æ–≤ –Ω–∞ —Ñ–∏–Ω–∏—à–µ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * - –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –±–µ–≥—É–Ω–æ–≤ "—Ç—Ä–∞–≤–º–∏—Ä—É–µ—Ç—Å—è" –∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å).
 */
@TaskDescription(taskNumber = 10,
        taskDescription = "–ì–æ–Ω–∫–∞ –±–µ–≥—É–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CyclicBarrier",
        href = "org/knit/solutions/taskExampleClasses/README.md")

public class Task2_10 implements Solution {
    public void execute() {
        while (true) {
            startRace();
            try {
                Thread.sleep(10000); // –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–Ω–∫–æ–π
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void startRace() {
        int runners = 5;
        System.out.println("–ì–æ–Ω–∫–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è, –°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã, –ø–æ–¥–æ–π—Ç–∏ –∫ —Å—Ç–∞—Ä—Ç—É!");
        CyclicBarrier startBarrier = new CyclicBarrier(runners, () -> {
            System.out.println("–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
        });

        CyclicBarrier finishBarrier = new CyclicBarrier(runners, () -> {
            System.out.println("–ì–æ–Ω–∫–∞ –ó–∞–≤–µ—Ä—à–∏–ª–∞—Å—å!");
        });
        ExecutorService executorService = Executors.newFixedThreadPool(runners);

        for (int i = 1; i <= runners; i++) {
            executorService.submit(new Runner(i, startBarrier, finishBarrier));
        }

        executorService.shutdown();
    }
}
