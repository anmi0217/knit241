package org.knit.solutions.TaskSem2;


import org.knit.TaskDescription;
import org.knit.solutions.ClassesSem2.lab2.task5.Warehouse;
import org.knit.solutions.ClassesSem2.lab4.task1.Solution;

/**
 * –ó–∞–¥–∞—á–∞ 2.7: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å-–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º üè≠üì¶
 * <p>
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã (–º–∞–∫—Å–∏–º—É–º 5).
 * - –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã.
 * - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∂–¥–µ—Ç (wait()).
 * - –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–∫—Å–∏–º—É–º, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∂–¥–µ—Ç (wait()).
 * <p>
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å wait() –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è, –∫–æ–≥–¥–∞ —Å–∫–ª–∞–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å notify() –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–ª–∞–¥–∞.
 */

@TaskDescription(taskNumber = 7,
        taskDescription = "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å-–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º",
        href = "org/knit/solutions/taskExampleClasses/README.md")

public class Task2_7 implements Solution {
    public void execute() {
        Warehouse warehouse = new Warehouse();

        // –ü–æ—Ç–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        Thread producer = new Thread(() -> {
            while (true) {
                warehouse.produce();
                try {
                    Thread.sleep(1000); // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        });

        // –ü–æ—Ç–æ–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        Thread consumer = new Thread(() -> {
            while (true) {
                warehouse.consume();
                try {
                    Thread.sleep(3000); // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        });

        producer.start();
        consumer.start();
    }
}

